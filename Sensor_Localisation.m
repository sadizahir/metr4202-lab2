%Detect cordinates of single frame




% Auto-generated by cameraCalibrator app on 10-Sep-2015
%-------------------------------------------------------
clear; 
% %cam = 'Microsoft® LifeCam Studio(TM)'; % assign webcam
% cam = webcam;
% NoOfImage = 4; % number of images
% image_capture = zeros(1,NoOfImage); % set image array
% preview(cam);
% pause(2); % wait 1 second
% 
% for i = 1:NoOfImage
%     image_capture = snapshot(cam);  % take camera shot
     filename = strcat('C:\Users\Kate\Documents\metr4202-lab2\calib_example\Image',int2str(i),'.png')
%     imwrite(image_capture,filename)
%     pause(2); % wait 1 second
% end

% Define images to process
imageFileNames = {'C:\Users\Kate\Documents\metr4202-lab2\calib_example\Image1.png',...
    'C:\Users\Kate\Documents\metr4202-lab2\calib_example\Image2.png',...
    'C:\Users\Kate\Documents\metr4202-lab2\calib_example\Image3.png',...
    'C:\Users\Kate\Documents\metr4202-lab2\calib_example\Image4.png',...
    }

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Generate world coordinates of the corners of the squares
squareSize = 20;  % in units of 'mm'
worldPoints = generateCheckerboardPoints(boardSize, squareSize)

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'mm');

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams, 'BarGraph');

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
originalImage = imread(imageFileNames{1});
undistortedImage = undistortImage(originalImage, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('SparseReconstructionExample')







%Prepare Calibration Images
clear;

calibration;

%cam = webcam; % assign webcam
% 
% preview(cam);
% pause(3);
% % 
% image_capture = snapshot(cam);
filename = strcat('C:\Users\Kate\Documents\metr4202-lab2\locate','.png');
% imwrite(image_capture,filename)


% Convert the image to the HSV color space.
imHSV = rgb2hsv(filename);

% Get the saturation channel.
saturation = imHSV(:, :, 2);

% Threshold the image
t = graythresh(saturation);
imCoin = (saturation > t);

figure; imshow(imCoin, 'InitialMagnification', magnification);
title('Segmented Coins');



% Reduce the size of the image for display.
scale = magnification / 100;
imDetectedCoins = imresize(im, scale);




magnification = 25;



%Read the Image Of Objects to be Measured
imOrig = imread(filename);
figure; imshow(imOrig, 'InitialMagnification', magnification);
title('Input Image');




%Undistort image using calibration program
[im, newOrigin] = undistortImage(imOrig, cameraParams, 'OutputView', 'full');
figure; imshow(im, 'InitialMagnification', magnification);
title('Undistorted Image');


%Compute Extrinsics

% Detect the checkerboard.
[imagePoints, boardSize] = detectCheckerboardPoints(im);

% Compute rotation and translation of the camera.
[R, t] = extrinsics(imagePoints, worldPoints, cameraParams);
% imagePoints
% worldPoints1 = pointsToWorld(cameraParams,R,t,worldPoints)








